import mill.scalalib.publish.Scope.Test
import $ivy.`com.goyeau::mill-git::0.2.5`

import com.goyeau.mill.git.GitVersionedPublishModule
import $ivy.`com.lihaoyi::mill-contrib-sonatypecentral:`
import mill.contrib.sonatypecentral.SonatypeCentralPublishModule

import mill._
import mill.scalalib._
import mill.scalalib.scalafmt._
import mill.scalalib.publish._
import mill.scalalib.api.ZincWorkerUtil._
import mill.scalalib.publish.{Developer, License, PomSettings, VersionControl}
import mill.main.BuildInfo.millVersion

import mill._, scalalib._, publish._

object versions {
  val millVersions = Seq("0.12.0", "0.12.1", "0.12.2", "0.12.10")
  val jibCore      = "0.27.2"
}

object `mill-docker` extends Cross[MillDockerCross](versions.millVersions) {}
trait MillDockerCross
    extends CrossModuleBase
    with ScalaModule
    with PublishModule
    with SonatypeCentralPublishModule
    with Cross.Module[String] {

  def millVersion                = crossValue
  override def crossScalaVersion = "2.13.15"

  /*
object `mill-docker` extends ScalaModule with PublishModule {
  def millVersion = versions.millVersions.head
   */
  def scalaVersion: T[String] = "2.13.15"

  // Set the `platformSuffix` so the name indicates what Mill version it is compiled for
  def platformSuffix = "_mill" + mill.main.BuildInfo.millBinPlatform

  override def publishVersion: T[String] = "0.0.2.1"

  override def ivyDeps = super.ivyDeps() ++ Agg(
    ivy"com.lihaoyi:mill-dist:$millVersion",
    ivy"com.google.cloud.tools:jib-core:${versions.jibCore}",
  )

  def pomSettings = PomSettings(
    description = "A docker plugin for the Mill build tool",
    organization = "io.github.jdsalchow",
    url = "https://github.com/jdsalchow/mill-docker",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("jdsalchow", "mill-docker"),
    developers = Seq(Developer("georgofenbeck", "Georg Ofenbeck", "https://github.com/georgofenbeck")),
  )

  // Testing Config, with necessary setup for unit/integration/example tests
  object test extends ScalaTests with TestModule.Utest {
    def ivyDeps = Agg(
      ivy"com.lihaoyi::mill-testkit:$millVersion",
      // ivy"com.google.cloud.tools:jib-core:${versions.jibCore}",  // hm - why is this not working?
    )
    def forkEnv = Map("MILL_EXECUTABLE_PATH" -> millExecutable.assembly().path.toString)

    // Create a Mill executable configured for testing our plugin
    object millExecutable extends JavaModule {
      def ivyDeps = Agg(
        ivy"com.lihaoyi:mill-dist:$millVersion",
        ivy"com.google.cloud.tools:jib-core:${versions.jibCore}",
      )
      def mainClass = Some("mill.runner.client.MillClientMain")
      def resources = Task {
        val p = Task.dest / "mill/local-test-overrides" / s"com.ofenbeck-${`mill-docker`().artifactId()}"
        os.write(p, `mill-docker`().localClasspath().map(_.path).mkString("\n"), createFolders = true)
        Seq(PathRef(Task.dest))
      }
    }
  }

}
